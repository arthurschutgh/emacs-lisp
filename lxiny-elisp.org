#+TITLE: Notes about Learning X in Y minutes where X = elisp
* Expressions, variables and functions
** Expressions
   Elisp programma's bestaan uit symbolic expressions. Afgekort:
   sexp. Ze worden omgeven met haakjes: ( en ).
   #+begin_src emacs-lisp :tangle yes
     (+ 2 2)
     (* (+ 3 2) 3)
   #+end_src
** Variables
   Met setq kun je een variabele (een naam die wijst naar een blok
   geheugen) een waarde geven.
   #+begin_src emacs-lisp :tangle yes
     (setq my-name "Arthur")
   #+end_src
** Functions
   Emacs heeft ingebouwde functies zoals insert. Hiermee kun je een
   string in een buffer plaatsen op de locatie van point (Emacs jargon
   voor cursor).
   #+begin_src emacs-lisp :tangle yes
     (insert "Hello!")
     ;; more than one argument
     (insert "Hello" " world!")
   #+end_src
   Je kunt ook je eigen functies definiÃ«ren:
   #+begin_src emacs-lisp :tangle yes
     (defun hello () (insert "Hello, I am " my-name))
   #+end_src
   De zojuist gedefinieerde functie kun je uitvoeren door z'n naam
   binnen haakjes te plaatsen.
   #+begin_src emacs-lisp :tangle yes
     (hello)
   #+end_src
   Een functie kun je argumenten meegeven.
   #+begin_src emacs-lisp :tangle yes
     (defun hello (name) (insert "Hello " name))
   #+end_src
   De functie kun je als volgt aanroepen:
   #+begin_src emacs-lisp :tangle yes
     (hello "you")
   #+end_src
* Buffers, windows and functions
  In Emacs buffers are displayed in windows. The thing handled by your
  window manager is called a frame in Emacs jargon.
** Buffers
   Je kunt een nieuwe buffer met de naam =*test*= openen in een nieuw
   window.
   #+begin_src emacs-lisp :tangle yes
     (switch-to-buffer-other-window "*test*")
   #+end_src
   Je kunt meerdere symbolic expressions combineren met "progn":
   #+begin_src emacs-lisp :tangle yes
     (progn (switch-to-buffer-other-window "*test*")
	    (hello "you"))
   #+end_src
   Een buffer legen kan met =erase-buffer=:
   #+begin_src emacs-lisp :tangle yes
     (progn (switch-to-buffer-other-window "*test*")
	    (erase-buffer)
	    (hello "there"))
   #+end_src
   Terugkeren naar hetzelfde window is ook mogelijk:
   #+begin_src emacs-lisp :tangle yes
     (progn
       (switch-to-buffer-other-window "*test*")
       (erase-buffer)
       (hello "you")
       (other-window 1)
       )
   #+end_src
** Let
   Een lokale variabele kun je maken met een let binding.
   #+begin_src emacs-lisp :tangle yes
     (let ((local-name "you"))
       (switch-to-buffer-other-window "*test*")
       (erase-buffer)
       (hello local-name)
       (other-window 1))
   #+end_src
** String format
   De opmaak van een string kun je bepalen met format:
   #+begin_src emacs-lisp :tangle yes
     (format "Hello %s!\n" "visitor")
   #+end_src
