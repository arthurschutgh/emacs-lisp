#+TITLE: Notes about Learning X in Y minutes where X = elisp
* Expressions, variables and functions
** Expressions
   Elisp programma's bestaan uit symbolic expressions. Afgekort:
   sexp. Ze worden omgeven met haakjes: ( en ).
   #+begin_src emacs-lisp :tangle yes
     (+ 2 2)
     (* (+ 3 2) 3)
   #+end_src
** Variables
   Met setq kun je een variabele (een naam die wijst naar een blok
   geheugen) een waarde geven.
   #+begin_src emacs-lisp :tangle yes
     (setq my-name "Arthur")
   #+end_src
** Functions
   Emacs heeft ingebouwde functies zoals insert. Hiermee kun je een
   string in een buffer plaatsen op de locatie van point (Emacs jargon
   voor cursor).
   #+begin_src emacs-lisp :tangle yes
     (insert "Hello!")
     ;; more than one argument
     (insert "Hello" " world!")
   #+end_src
   Je kunt ook je eigen functies definiÃ«ren:
   #+begin_src emacs-lisp :tangle yes
     (defun hello () (insert "Hello, I am " my-name))
   #+end_src
   De zojuist gedefinieerde functie kun je uitvoeren door z'n naam
   binnen haakjes te plaatsen.
   #+begin_src emacs-lisp :tangle yes
     (hello)
   #+end_src
   Een functie kun je argumenten meegeven.
   #+begin_src emacs-lisp :tangle yes
     (defun hello (name) (insert "Hello " name))
   #+end_src
   De functie kun je als volgt aanroepen:
   #+begin_src emacs-lisp :tangle yes
     (hello "you")
   #+end_src
* Buffers, windows and functions
  In Emacs buffers are displayed in windows. The thing handled by your
  window manager is called a frame in Emacs jargon.
** Buffers
   Je kunt een nieuwe buffer met de naam =*test*= openen in een nieuw
   window.
   #+begin_src emacs-lisp :tangle yes
     (switch-to-buffer-other-window "*test*")
   #+end_src
   Je kunt meerdere symbolic expressions combineren met "progn":
   #+begin_src emacs-lisp :tangle yes
     (progn (switch-to-buffer-other-window "*test*")
	    (hello "you"))
   #+end_src
   Een buffer legen kan met =erase-buffer=:
   #+begin_src emacs-lisp :tangle yes
     (progn (switch-to-buffer-other-window "*test*")
	    (erase-buffer)
	    (hello "there"))
   #+end_src
   Terugkeren naar hetzelfde window is ook mogelijk:
   #+begin_src emacs-lisp :tangle yes
     (progn
       (switch-to-buffer-other-window "*test*")
       (erase-buffer)
       (hello "you")
       (other-window 1)
       )
   #+end_src
** Let
   Een lokale variabele kun je maken met een let binding.
   #+begin_src emacs-lisp :tangle yes
     (let ((local-name "you"))
       (switch-to-buffer-other-window "*test*")
       (erase-buffer)
       (hello local-name)
       (other-window 1))
   #+end_src
** String format
   De opmaak van een string kun je bepalen met format:
   #+begin_src emacs-lisp :tangle yes
     (format "Hello %s!\n" "visitor")
   #+end_src
   De string "visitor" wordt geplaatst op de locatie van =%s=.

   We passen de functie hello aan:
   #+begin_src emacs-lisp :tangle yes
     (defun hello (name)
       (insert (format "Hello %s!\n" name)))

     (hello "you")
   #+end_src
   Nog een functie met let:
   #+begin_src emacs-lisp :tangle yes
     (defun greeting (name)
       (let ((your-name "Bastien"))
	 (insert (format "Hello %s!\n\nI am %s."
			 name
			 your-name))))

     (greeting "you")
   #+end_src
** Reading from the minibuffer
   Sommige functies zijn interactief. Je kunt bijvoorbeeld invoer
   opnemen van de gebruiker.
   #+begin_src emacs-lisp :tangle yes
     (read-from-minibuffer "Enter your name: ")
   #+end_src

   We passen de greeting functie aan om invoer op te nemen:
   #+begin_src emacs-lisp :tangle yes
     (defun greeting (from-name)
       (let ((your-name (read-from-minibuffer "Enter your name: ")))
	     (insert (format "Hello!\n\nI am %s and your are %s."
			     from-name
			     your-name))))

     (greeting "Arthur")
   #+end_src
   We passen greeting nogmaals aan om het resultaat in een andere
   buffer te laten zien:
   #+begin_src emacs-lisp :tangle yes
     (defun greeting (from-name)
       (let ((your-name (read-from-minibuffer "Enter your name: ")))
	 (switch-to-buffer-other-window "*test*")
	 (erase-buffer)
	 (insert (format "Hello!\n\nI am %s and your are %s." from-name your-name))
	 (other-window 1)
	 ))

     (greeting "test")

   #+end_src
* Lists and functions
** Lists
   Als je een "literal list" wil maken dan moet je hem voorzien van
   een quote symbool. Doe je dit niet dan probeert de lisp interpreter
   het eerste element uit te voeren alsof het een functie betrof.
   #+begin_src emacs-lisp :tangle yes
     (setq list-of-names '("Sarah" "Chloe" "Mathilde"))

     (car list-of-names)

     (cdr list-of-names)
   #+end_src
   De functie car geeft het eerste element van de list als
   resultaat. De functie cdr geeft als resultaat een list met alle
   elementen behalve het eerste element.

   Een element voeg je toe met =push=.

   #+begin_src emacs-lisp :tangle yes
     (push "Stephanie" list-of-names)
   #+end_src

   Op ieder element van de list kun je een functie uitvoeren met
   =mapcar=.

   #+begin_src emacs-lisp :tangle yes
     (mapcar 'hello list-of-names)
   #+end_src

   We passen greeting weer aan:
   #+begin_src emacs-lisp :tangle yes
     (defun greeting ()
       (switch-to-buffer-other-window "*test*")
       (erase-buffer)
       (mapcar 'hello list-of-names)
       (other-window 1)
       )

     (greeting)
   #+end_src
** Search
   In Emacs kun je zoeken naar tekst en het vervangen.

   Een voorbeeld:
   #+begin_src emacs-lisp :tangle yes
     (defun replace-hello-by-bonjour ()
       (switch-to-buffer-other-window "*test*")
       (goto-char (point-min))
       (while (search-forward "Hello")
	 (replace-match "Bonjour"))
       (other-window 1)
       )

     (replace-hello-by-bonjour)
   #+end_src

   We passen =replace-hello-by-bonjour= aan, zodat hij geen foutmelding meer geeft.

   #+begin_src emacs-lisp :tangle yes
     (defun replace-hello-by-bonjour ()
       (switch-to-buffer-other-window "*test*")
       (erase-buffer)
       (mapcar 'hello list-of-names)
       (goto-char (point-min))
       (while (search-forward "Hello" nil t)
	 (replace-match "Bonjour"))
       (other-window 1)
       )

     (replace-hello-by-bonjour)
   #+end_src
